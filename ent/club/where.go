// Code generated by entc, DO NOT EDIT.

package club

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/khu-dev/khumu-club/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Homepage applies equality check predicate on the "homepage" field. It's identical to HomepageEQ.
func Homepage(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomepage), v))
	})
}

// Instagram applies equality check predicate on the "instagram" field. It's identical to InstagramEQ.
func Instagram(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// Facebook applies equality check predicate on the "facebook" field. It's identical to FacebookEQ.
func Facebook(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Recommended applies equality check predicate on the "recommended" field. It's identical to RecommendedEQ.
func Recommended(v bool) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommended), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImages)))
	})
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImages)))
	})
}

// HomepageEQ applies the EQ predicate on the "homepage" field.
func HomepageEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomepage), v))
	})
}

// HomepageNEQ applies the NEQ predicate on the "homepage" field.
func HomepageNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHomepage), v))
	})
}

// HomepageIn applies the In predicate on the "homepage" field.
func HomepageIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHomepage), v...))
	})
}

// HomepageNotIn applies the NotIn predicate on the "homepage" field.
func HomepageNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHomepage), v...))
	})
}

// HomepageGT applies the GT predicate on the "homepage" field.
func HomepageGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHomepage), v))
	})
}

// HomepageGTE applies the GTE predicate on the "homepage" field.
func HomepageGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHomepage), v))
	})
}

// HomepageLT applies the LT predicate on the "homepage" field.
func HomepageLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHomepage), v))
	})
}

// HomepageLTE applies the LTE predicate on the "homepage" field.
func HomepageLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHomepage), v))
	})
}

// HomepageContains applies the Contains predicate on the "homepage" field.
func HomepageContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHomepage), v))
	})
}

// HomepageHasPrefix applies the HasPrefix predicate on the "homepage" field.
func HomepageHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHomepage), v))
	})
}

// HomepageHasSuffix applies the HasSuffix predicate on the "homepage" field.
func HomepageHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHomepage), v))
	})
}

// HomepageIsNil applies the IsNil predicate on the "homepage" field.
func HomepageIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHomepage)))
	})
}

// HomepageNotNil applies the NotNil predicate on the "homepage" field.
func HomepageNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHomepage)))
	})
}

// HomepageEqualFold applies the EqualFold predicate on the "homepage" field.
func HomepageEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHomepage), v))
	})
}

// HomepageContainsFold applies the ContainsFold predicate on the "homepage" field.
func HomepageContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHomepage), v))
	})
}

// InstagramEQ applies the EQ predicate on the "instagram" field.
func InstagramEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// InstagramNEQ applies the NEQ predicate on the "instagram" field.
func InstagramNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstagram), v))
	})
}

// InstagramIn applies the In predicate on the "instagram" field.
func InstagramIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstagram), v...))
	})
}

// InstagramNotIn applies the NotIn predicate on the "instagram" field.
func InstagramNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstagram), v...))
	})
}

// InstagramGT applies the GT predicate on the "instagram" field.
func InstagramGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstagram), v))
	})
}

// InstagramGTE applies the GTE predicate on the "instagram" field.
func InstagramGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstagram), v))
	})
}

// InstagramLT applies the LT predicate on the "instagram" field.
func InstagramLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstagram), v))
	})
}

// InstagramLTE applies the LTE predicate on the "instagram" field.
func InstagramLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstagram), v))
	})
}

// InstagramContains applies the Contains predicate on the "instagram" field.
func InstagramContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstagram), v))
	})
}

// InstagramHasPrefix applies the HasPrefix predicate on the "instagram" field.
func InstagramHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstagram), v))
	})
}

// InstagramHasSuffix applies the HasSuffix predicate on the "instagram" field.
func InstagramHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstagram), v))
	})
}

// InstagramIsNil applies the IsNil predicate on the "instagram" field.
func InstagramIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInstagram)))
	})
}

// InstagramNotNil applies the NotNil predicate on the "instagram" field.
func InstagramNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInstagram)))
	})
}

// InstagramEqualFold applies the EqualFold predicate on the "instagram" field.
func InstagramEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstagram), v))
	})
}

// InstagramContainsFold applies the ContainsFold predicate on the "instagram" field.
func InstagramContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstagram), v))
	})
}

// FacebookEQ applies the EQ predicate on the "facebook" field.
func FacebookEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// FacebookNEQ applies the NEQ predicate on the "facebook" field.
func FacebookNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacebook), v))
	})
}

// FacebookIn applies the In predicate on the "facebook" field.
func FacebookIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacebook), v...))
	})
}

// FacebookNotIn applies the NotIn predicate on the "facebook" field.
func FacebookNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacebook), v...))
	})
}

// FacebookGT applies the GT predicate on the "facebook" field.
func FacebookGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacebook), v))
	})
}

// FacebookGTE applies the GTE predicate on the "facebook" field.
func FacebookGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacebook), v))
	})
}

// FacebookLT applies the LT predicate on the "facebook" field.
func FacebookLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacebook), v))
	})
}

// FacebookLTE applies the LTE predicate on the "facebook" field.
func FacebookLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacebook), v))
	})
}

// FacebookContains applies the Contains predicate on the "facebook" field.
func FacebookContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFacebook), v))
	})
}

// FacebookHasPrefix applies the HasPrefix predicate on the "facebook" field.
func FacebookHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFacebook), v))
	})
}

// FacebookHasSuffix applies the HasSuffix predicate on the "facebook" field.
func FacebookHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFacebook), v))
	})
}

// FacebookIsNil applies the IsNil predicate on the "facebook" field.
func FacebookIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFacebook)))
	})
}

// FacebookNotNil applies the NotNil predicate on the "facebook" field.
func FacebookNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFacebook)))
	})
}

// FacebookEqualFold applies the EqualFold predicate on the "facebook" field.
func FacebookEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFacebook), v))
	})
}

// FacebookContainsFold applies the ContainsFold predicate on the "facebook" field.
func FacebookContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFacebook), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhone)))
	})
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhone)))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmail)))
	})
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmail)))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// RecommendedEQ applies the EQ predicate on the "recommended" field.
func RecommendedEQ(v bool) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommended), v))
	})
}

// RecommendedNEQ applies the NEQ predicate on the "recommended" field.
func RecommendedNEQ(v bool) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecommended), v))
	})
}

// HasLikes applies the HasEdge predicate on the "likes" edge.
func HasLikes() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LikesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikesWith applies the HasEdge predicate on the "likes" edge with a given conditions (other predicates).
func HasLikesWith(preds ...predicate.LikeClub) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LikesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CategoriesTable, CategoryFieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CategoriesTable, CategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Category) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CategoriesInverseTable, CategoryFieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CategoriesTable, CategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		p(s.Not())
	})
}
