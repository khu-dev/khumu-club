// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khu-dev/khumu-club/ent/club"
	"github.com/khu-dev/khumu-club/ent/likeclub"
)

// LikeClubCreate is the builder for creating a LikeClub entity.
type LikeClubCreate struct {
	config
	mutation *LikeClubMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (lcc *LikeClubCreate) SetUsername(s string) *LikeClubCreate {
	lcc.mutation.SetUsername(s)
	return lcc
}

// SetCreatedAt sets the "created_at" field.
func (lcc *LikeClubCreate) SetCreatedAt(t time.Time) *LikeClubCreate {
	lcc.mutation.SetCreatedAt(t)
	return lcc
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (lcc *LikeClubCreate) SetClubID(id int) *LikeClubCreate {
	lcc.mutation.SetClubID(id)
	return lcc
}

// SetNillableClubID sets the "club" edge to the Club entity by ID if the given value is not nil.
func (lcc *LikeClubCreate) SetNillableClubID(id *int) *LikeClubCreate {
	if id != nil {
		lcc = lcc.SetClubID(*id)
	}
	return lcc
}

// SetClub sets the "club" edge to the Club entity.
func (lcc *LikeClubCreate) SetClub(c *Club) *LikeClubCreate {
	return lcc.SetClubID(c.ID)
}

// Mutation returns the LikeClubMutation object of the builder.
func (lcc *LikeClubCreate) Mutation() *LikeClubMutation {
	return lcc.mutation
}

// Save creates the LikeClub in the database.
func (lcc *LikeClubCreate) Save(ctx context.Context) (*LikeClub, error) {
	var (
		err  error
		node *LikeClub
	)
	if len(lcc.hooks) == 0 {
		if err = lcc.check(); err != nil {
			return nil, err
		}
		node, err = lcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikeClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lcc.check(); err != nil {
				return nil, err
			}
			lcc.mutation = mutation
			node, err = lcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lcc.hooks) - 1; i >= 0; i-- {
			mut = lcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LikeClubCreate) SaveX(ctx context.Context) *LikeClub {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LikeClubCreate) check() error {
	if _, ok := lcc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New("ent: missing required field \"username\"")}
	}
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (lcc *LikeClubCreate) sqlSave(ctx context.Context) (*LikeClub, error) {
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lcc *LikeClubCreate) createSpec() (*LikeClub, *sqlgraph.CreateSpec) {
	var (
		_node = &LikeClub{config: lcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: likeclub.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: likeclub.FieldID,
			},
		}
	)
	if value, ok := lcc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: likeclub.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := lcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: likeclub.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := lcc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likeclub.ClubTable,
			Columns: []string{likeclub.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.club_likes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LikeClubCreateBulk is the builder for creating many LikeClub entities in bulk.
type LikeClubCreateBulk struct {
	config
	builders []*LikeClubCreate
}

// Save creates the LikeClub entities in the database.
func (lccb *LikeClubCreateBulk) Save(ctx context.Context) ([]*LikeClub, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LikeClub, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LikeClubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LikeClubCreateBulk) SaveX(ctx context.Context) []*LikeClub {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
