// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/khu-dev/khumu-club/ent/category"
	"github.com/khu-dev/khumu-club/ent/club"
	"github.com/khu-dev/khumu-club/ent/likeclub"
	"github.com/khu-dev/khumu-club/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategory = "Category"
	TypeClub     = "Club"
	TypeLikeClub = "LikeClub"
)

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op            Op
	typ           string
	id            *string
	clearedFields map[string]struct{}
	clubs         map[int]struct{}
	removedclubs  map[int]struct{}
	clearedclubs  bool
	done          bool
	oldValue      func(context.Context) (*Category, error)
	predicates    []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id string) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Category entities.
func (m *CategoryMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *CategoryMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// AddClubIDs adds the "clubs" edge to the Club entity by ids.
func (m *CategoryMutation) AddClubIDs(ids ...int) {
	if m.clubs == nil {
		m.clubs = make(map[int]struct{})
	}
	for i := range ids {
		m.clubs[ids[i]] = struct{}{}
	}
}

// ClearClubs clears the "clubs" edge to the Club entity.
func (m *CategoryMutation) ClearClubs() {
	m.clearedclubs = true
}

// ClubsCleared reports if the "clubs" edge to the Club entity was cleared.
func (m *CategoryMutation) ClubsCleared() bool {
	return m.clearedclubs
}

// RemoveClubIDs removes the "clubs" edge to the Club entity by IDs.
func (m *CategoryMutation) RemoveClubIDs(ids ...int) {
	if m.removedclubs == nil {
		m.removedclubs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedclubs[ids[i]] = struct{}{}
	}
}

// RemovedClubs returns the removed IDs of the "clubs" edge to the Club entity.
func (m *CategoryMutation) RemovedClubsIDs() (ids []int) {
	for id := range m.removedclubs {
		ids = append(ids, id)
	}
	return
}

// ClubsIDs returns the "clubs" edge IDs in the mutation.
func (m *CategoryMutation) ClubsIDs() (ids []int) {
	for id := range m.clubs {
		ids = append(ids, id)
	}
	return
}

// ResetClubs resets all changes to the "clubs" edge.
func (m *CategoryMutation) ResetClubs() {
	m.clubs = nil
	m.clearedclubs = false
	m.removedclubs = nil
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clubs != nil {
		edges = append(edges, category.EdgeClubs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeClubs:
		ids := make([]ent.Value, 0, len(m.clubs))
		for id := range m.clubs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclubs != nil {
		edges = append(edges, category.EdgeClubs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeClubs:
		ids := make([]ent.Value, 0, len(m.removedclubs))
		for id := range m.removedclubs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclubs {
		edges = append(edges, category.EdgeClubs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeClubs:
		return m.clearedclubs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeClubs:
		m.ResetClubs()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// ClubMutation represents an operation that mutates the Club nodes in the graph.
type ClubMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	summary           *string
	description       *string
	images            *[]string
	homepage          *string
	instagram         *string
	facebook          *string
	phone             *string
	email             *string
	recommended       *bool
	clearedFields     map[string]struct{}
	likes             map[int]struct{}
	removedlikes      map[int]struct{}
	clearedlikes      bool
	categories        map[string]struct{}
	removedcategories map[string]struct{}
	clearedcategories bool
	done              bool
	oldValue          func(context.Context) (*Club, error)
	predicates        []predicate.Club
}

var _ ent.Mutation = (*ClubMutation)(nil)

// clubOption allows management of the mutation configuration using functional options.
type clubOption func(*ClubMutation)

// newClubMutation creates new mutation for the Club entity.
func newClubMutation(c config, op Op, opts ...clubOption) *ClubMutation {
	m := &ClubMutation{
		config:        c,
		op:            op,
		typ:           TypeClub,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClubID sets the ID field of the mutation.
func withClubID(id int) clubOption {
	return func(m *ClubMutation) {
		var (
			err   error
			once  sync.Once
			value *Club
		)
		m.oldValue = func(ctx context.Context) (*Club, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Club.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClub sets the old Club of the mutation.
func withClub(node *Club) clubOption {
	return func(m *ClubMutation) {
		m.oldValue = func(context.Context) (*Club, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClubMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClubMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ClubMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ClubMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClubMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClubMutation) ResetName() {
	m.name = nil
}

// SetSummary sets the "summary" field.
func (m *ClubMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *ClubMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ResetSummary resets all changes to the "summary" field.
func (m *ClubMutation) ResetSummary() {
	m.summary = nil
}

// SetDescription sets the "description" field.
func (m *ClubMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ClubMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ClubMutation) ResetDescription() {
	m.description = nil
}

// SetImages sets the "images" field.
func (m *ClubMutation) SetImages(s []string) {
	m.images = &s
}

// Images returns the value of the "images" field in the mutation.
func (m *ClubMutation) Images() (r []string, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldImages(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// ClearImages clears the value of the "images" field.
func (m *ClubMutation) ClearImages() {
	m.images = nil
	m.clearedFields[club.FieldImages] = struct{}{}
}

// ImagesCleared returns if the "images" field was cleared in this mutation.
func (m *ClubMutation) ImagesCleared() bool {
	_, ok := m.clearedFields[club.FieldImages]
	return ok
}

// ResetImages resets all changes to the "images" field.
func (m *ClubMutation) ResetImages() {
	m.images = nil
	delete(m.clearedFields, club.FieldImages)
}

// SetHomepage sets the "homepage" field.
func (m *ClubMutation) SetHomepage(s string) {
	m.homepage = &s
}

// Homepage returns the value of the "homepage" field in the mutation.
func (m *ClubMutation) Homepage() (r string, exists bool) {
	v := m.homepage
	if v == nil {
		return
	}
	return *v, true
}

// OldHomepage returns the old "homepage" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldHomepage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHomepage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHomepage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHomepage: %w", err)
	}
	return oldValue.Homepage, nil
}

// ClearHomepage clears the value of the "homepage" field.
func (m *ClubMutation) ClearHomepage() {
	m.homepage = nil
	m.clearedFields[club.FieldHomepage] = struct{}{}
}

// HomepageCleared returns if the "homepage" field was cleared in this mutation.
func (m *ClubMutation) HomepageCleared() bool {
	_, ok := m.clearedFields[club.FieldHomepage]
	return ok
}

// ResetHomepage resets all changes to the "homepage" field.
func (m *ClubMutation) ResetHomepage() {
	m.homepage = nil
	delete(m.clearedFields, club.FieldHomepage)
}

// SetInstagram sets the "instagram" field.
func (m *ClubMutation) SetInstagram(s string) {
	m.instagram = &s
}

// Instagram returns the value of the "instagram" field in the mutation.
func (m *ClubMutation) Instagram() (r string, exists bool) {
	v := m.instagram
	if v == nil {
		return
	}
	return *v, true
}

// OldInstagram returns the old "instagram" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldInstagram(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInstagram is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInstagram requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstagram: %w", err)
	}
	return oldValue.Instagram, nil
}

// ClearInstagram clears the value of the "instagram" field.
func (m *ClubMutation) ClearInstagram() {
	m.instagram = nil
	m.clearedFields[club.FieldInstagram] = struct{}{}
}

// InstagramCleared returns if the "instagram" field was cleared in this mutation.
func (m *ClubMutation) InstagramCleared() bool {
	_, ok := m.clearedFields[club.FieldInstagram]
	return ok
}

// ResetInstagram resets all changes to the "instagram" field.
func (m *ClubMutation) ResetInstagram() {
	m.instagram = nil
	delete(m.clearedFields, club.FieldInstagram)
}

// SetFacebook sets the "facebook" field.
func (m *ClubMutation) SetFacebook(s string) {
	m.facebook = &s
}

// Facebook returns the value of the "facebook" field in the mutation.
func (m *ClubMutation) Facebook() (r string, exists bool) {
	v := m.facebook
	if v == nil {
		return
	}
	return *v, true
}

// OldFacebook returns the old "facebook" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldFacebook(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFacebook is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFacebook requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacebook: %w", err)
	}
	return oldValue.Facebook, nil
}

// ClearFacebook clears the value of the "facebook" field.
func (m *ClubMutation) ClearFacebook() {
	m.facebook = nil
	m.clearedFields[club.FieldFacebook] = struct{}{}
}

// FacebookCleared returns if the "facebook" field was cleared in this mutation.
func (m *ClubMutation) FacebookCleared() bool {
	_, ok := m.clearedFields[club.FieldFacebook]
	return ok
}

// ResetFacebook resets all changes to the "facebook" field.
func (m *ClubMutation) ResetFacebook() {
	m.facebook = nil
	delete(m.clearedFields, club.FieldFacebook)
}

// SetPhone sets the "phone" field.
func (m *ClubMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *ClubMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *ClubMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[club.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *ClubMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[club.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *ClubMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, club.FieldPhone)
}

// SetEmail sets the "email" field.
func (m *ClubMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *ClubMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *ClubMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[club.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *ClubMutation) EmailCleared() bool {
	_, ok := m.clearedFields[club.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *ClubMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, club.FieldEmail)
}

// SetRecommended sets the "recommended" field.
func (m *ClubMutation) SetRecommended(b bool) {
	m.recommended = &b
}

// Recommended returns the value of the "recommended" field in the mutation.
func (m *ClubMutation) Recommended() (r bool, exists bool) {
	v := m.recommended
	if v == nil {
		return
	}
	return *v, true
}

// OldRecommended returns the old "recommended" field's value of the Club entity.
// If the Club object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClubMutation) OldRecommended(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecommended is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecommended requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecommended: %w", err)
	}
	return oldValue.Recommended, nil
}

// ResetRecommended resets all changes to the "recommended" field.
func (m *ClubMutation) ResetRecommended() {
	m.recommended = nil
}

// AddLikeIDs adds the "likes" edge to the LikeClub entity by ids.
func (m *ClubMutation) AddLikeIDs(ids ...int) {
	if m.likes == nil {
		m.likes = make(map[int]struct{})
	}
	for i := range ids {
		m.likes[ids[i]] = struct{}{}
	}
}

// ClearLikes clears the "likes" edge to the LikeClub entity.
func (m *ClubMutation) ClearLikes() {
	m.clearedlikes = true
}

// LikesCleared reports if the "likes" edge to the LikeClub entity was cleared.
func (m *ClubMutation) LikesCleared() bool {
	return m.clearedlikes
}

// RemoveLikeIDs removes the "likes" edge to the LikeClub entity by IDs.
func (m *ClubMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlikes == nil {
		m.removedlikes = make(map[int]struct{})
	}
	for i := range ids {
		m.removedlikes[ids[i]] = struct{}{}
	}
}

// RemovedLikes returns the removed IDs of the "likes" edge to the LikeClub entity.
func (m *ClubMutation) RemovedLikesIDs() (ids []int) {
	for id := range m.removedlikes {
		ids = append(ids, id)
	}
	return
}

// LikesIDs returns the "likes" edge IDs in the mutation.
func (m *ClubMutation) LikesIDs() (ids []int) {
	for id := range m.likes {
		ids = append(ids, id)
	}
	return
}

// ResetLikes resets all changes to the "likes" edge.
func (m *ClubMutation) ResetLikes() {
	m.likes = nil
	m.clearedlikes = false
	m.removedlikes = nil
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *ClubMutation) AddCategoryIDs(ids ...string) {
	if m.categories == nil {
		m.categories = make(map[string]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *ClubMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *ClubMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *ClubMutation) RemoveCategoryIDs(ids ...string) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[string]struct{})
	}
	for i := range ids {
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *ClubMutation) RemovedCategoriesIDs() (ids []string) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *ClubMutation) CategoriesIDs() (ids []string) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *ClubMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// Op returns the operation name.
func (m *ClubMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Club).
func (m *ClubMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClubMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, club.FieldName)
	}
	if m.summary != nil {
		fields = append(fields, club.FieldSummary)
	}
	if m.description != nil {
		fields = append(fields, club.FieldDescription)
	}
	if m.images != nil {
		fields = append(fields, club.FieldImages)
	}
	if m.homepage != nil {
		fields = append(fields, club.FieldHomepage)
	}
	if m.instagram != nil {
		fields = append(fields, club.FieldInstagram)
	}
	if m.facebook != nil {
		fields = append(fields, club.FieldFacebook)
	}
	if m.phone != nil {
		fields = append(fields, club.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, club.FieldEmail)
	}
	if m.recommended != nil {
		fields = append(fields, club.FieldRecommended)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClubMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case club.FieldName:
		return m.Name()
	case club.FieldSummary:
		return m.Summary()
	case club.FieldDescription:
		return m.Description()
	case club.FieldImages:
		return m.Images()
	case club.FieldHomepage:
		return m.Homepage()
	case club.FieldInstagram:
		return m.Instagram()
	case club.FieldFacebook:
		return m.Facebook()
	case club.FieldPhone:
		return m.Phone()
	case club.FieldEmail:
		return m.Email()
	case club.FieldRecommended:
		return m.Recommended()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClubMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case club.FieldName:
		return m.OldName(ctx)
	case club.FieldSummary:
		return m.OldSummary(ctx)
	case club.FieldDescription:
		return m.OldDescription(ctx)
	case club.FieldImages:
		return m.OldImages(ctx)
	case club.FieldHomepage:
		return m.OldHomepage(ctx)
	case club.FieldInstagram:
		return m.OldInstagram(ctx)
	case club.FieldFacebook:
		return m.OldFacebook(ctx)
	case club.FieldPhone:
		return m.OldPhone(ctx)
	case club.FieldEmail:
		return m.OldEmail(ctx)
	case club.FieldRecommended:
		return m.OldRecommended(ctx)
	}
	return nil, fmt.Errorf("unknown Club field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClubMutation) SetField(name string, value ent.Value) error {
	switch name {
	case club.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case club.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case club.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case club.FieldImages:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case club.FieldHomepage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHomepage(v)
		return nil
	case club.FieldInstagram:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstagram(v)
		return nil
	case club.FieldFacebook:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacebook(v)
		return nil
	case club.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case club.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case club.FieldRecommended:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecommended(v)
		return nil
	}
	return fmt.Errorf("unknown Club field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClubMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClubMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClubMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Club numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClubMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(club.FieldImages) {
		fields = append(fields, club.FieldImages)
	}
	if m.FieldCleared(club.FieldHomepage) {
		fields = append(fields, club.FieldHomepage)
	}
	if m.FieldCleared(club.FieldInstagram) {
		fields = append(fields, club.FieldInstagram)
	}
	if m.FieldCleared(club.FieldFacebook) {
		fields = append(fields, club.FieldFacebook)
	}
	if m.FieldCleared(club.FieldPhone) {
		fields = append(fields, club.FieldPhone)
	}
	if m.FieldCleared(club.FieldEmail) {
		fields = append(fields, club.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClubMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClubMutation) ClearField(name string) error {
	switch name {
	case club.FieldImages:
		m.ClearImages()
		return nil
	case club.FieldHomepage:
		m.ClearHomepage()
		return nil
	case club.FieldInstagram:
		m.ClearInstagram()
		return nil
	case club.FieldFacebook:
		m.ClearFacebook()
		return nil
	case club.FieldPhone:
		m.ClearPhone()
		return nil
	case club.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown Club nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClubMutation) ResetField(name string) error {
	switch name {
	case club.FieldName:
		m.ResetName()
		return nil
	case club.FieldSummary:
		m.ResetSummary()
		return nil
	case club.FieldDescription:
		m.ResetDescription()
		return nil
	case club.FieldImages:
		m.ResetImages()
		return nil
	case club.FieldHomepage:
		m.ResetHomepage()
		return nil
	case club.FieldInstagram:
		m.ResetInstagram()
		return nil
	case club.FieldFacebook:
		m.ResetFacebook()
		return nil
	case club.FieldPhone:
		m.ResetPhone()
		return nil
	case club.FieldEmail:
		m.ResetEmail()
		return nil
	case club.FieldRecommended:
		m.ResetRecommended()
		return nil
	}
	return fmt.Errorf("unknown Club field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClubMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.likes != nil {
		edges = append(edges, club.EdgeLikes)
	}
	if m.categories != nil {
		edges = append(edges, club.EdgeCategories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClubMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case club.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.likes))
		for id := range m.likes {
			ids = append(ids, id)
		}
		return ids
	case club.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClubMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlikes != nil {
		edges = append(edges, club.EdgeLikes)
	}
	if m.removedcategories != nil {
		edges = append(edges, club.EdgeCategories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClubMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case club.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.removedlikes))
		for id := range m.removedlikes {
			ids = append(ids, id)
		}
		return ids
	case club.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClubMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlikes {
		edges = append(edges, club.EdgeLikes)
	}
	if m.clearedcategories {
		edges = append(edges, club.EdgeCategories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClubMutation) EdgeCleared(name string) bool {
	switch name {
	case club.EdgeLikes:
		return m.clearedlikes
	case club.EdgeCategories:
		return m.clearedcategories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClubMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Club unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClubMutation) ResetEdge(name string) error {
	switch name {
	case club.EdgeLikes:
		m.ResetLikes()
		return nil
	case club.EdgeCategories:
		m.ResetCategories()
		return nil
	}
	return fmt.Errorf("unknown Club edge %s", name)
}

// LikeClubMutation represents an operation that mutates the LikeClub nodes in the graph.
type LikeClubMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	club          *int
	clearedclub   bool
	done          bool
	oldValue      func(context.Context) (*LikeClub, error)
	predicates    []predicate.LikeClub
}

var _ ent.Mutation = (*LikeClubMutation)(nil)

// likeclubOption allows management of the mutation configuration using functional options.
type likeclubOption func(*LikeClubMutation)

// newLikeClubMutation creates new mutation for the LikeClub entity.
func newLikeClubMutation(c config, op Op, opts ...likeclubOption) *LikeClubMutation {
	m := &LikeClubMutation{
		config:        c,
		op:            op,
		typ:           TypeLikeClub,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLikeClubID sets the ID field of the mutation.
func withLikeClubID(id int) likeclubOption {
	return func(m *LikeClubMutation) {
		var (
			err   error
			once  sync.Once
			value *LikeClub
		)
		m.oldValue = func(ctx context.Context) (*LikeClub, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LikeClub.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLikeClub sets the old LikeClub of the mutation.
func withLikeClub(node *LikeClub) likeclubOption {
	return func(m *LikeClubMutation) {
		m.oldValue = func(context.Context) (*LikeClub, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikeClubMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikeClubMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *LikeClubMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *LikeClubMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *LikeClubMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the LikeClub entity.
// If the LikeClub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeClubMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *LikeClubMutation) ResetUsername() {
	m.username = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LikeClubMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LikeClubMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LikeClub entity.
// If the LikeClub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeClubMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LikeClubMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetClubID sets the "club" edge to the Club entity by id.
func (m *LikeClubMutation) SetClubID(id int) {
	m.club = &id
}

// ClearClub clears the "club" edge to the Club entity.
func (m *LikeClubMutation) ClearClub() {
	m.clearedclub = true
}

// ClubCleared reports if the "club" edge to the Club entity was cleared.
func (m *LikeClubMutation) ClubCleared() bool {
	return m.clearedclub
}

// ClubID returns the "club" edge ID in the mutation.
func (m *LikeClubMutation) ClubID() (id int, exists bool) {
	if m.club != nil {
		return *m.club, true
	}
	return
}

// ClubIDs returns the "club" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClubID instead. It exists only for internal usage by the builders.
func (m *LikeClubMutation) ClubIDs() (ids []int) {
	if id := m.club; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClub resets all changes to the "club" edge.
func (m *LikeClubMutation) ResetClub() {
	m.club = nil
	m.clearedclub = false
}

// Op returns the operation name.
func (m *LikeClubMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LikeClub).
func (m *LikeClubMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikeClubMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, likeclub.FieldUsername)
	}
	if m.created_at != nil {
		fields = append(fields, likeclub.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikeClubMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case likeclub.FieldUsername:
		return m.Username()
	case likeclub.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikeClubMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case likeclub.FieldUsername:
		return m.OldUsername(ctx)
	case likeclub.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LikeClub field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeClubMutation) SetField(name string, value ent.Value) error {
	switch name {
	case likeclub.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case likeclub.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LikeClub field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikeClubMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikeClubMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeClubMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LikeClub numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikeClubMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikeClubMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikeClubMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LikeClub nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikeClubMutation) ResetField(name string) error {
	switch name {
	case likeclub.FieldUsername:
		m.ResetUsername()
		return nil
	case likeclub.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown LikeClub field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikeClubMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.club != nil {
		edges = append(edges, likeclub.EdgeClub)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikeClubMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case likeclub.EdgeClub:
		if id := m.club; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikeClubMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikeClubMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikeClubMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclub {
		edges = append(edges, likeclub.EdgeClub)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikeClubMutation) EdgeCleared(name string) bool {
	switch name {
	case likeclub.EdgeClub:
		return m.clearedclub
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikeClubMutation) ClearEdge(name string) error {
	switch name {
	case likeclub.EdgeClub:
		m.ClearClub()
		return nil
	}
	return fmt.Errorf("unknown LikeClub unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikeClubMutation) ResetEdge(name string) error {
	switch name {
	case likeclub.EdgeClub:
		m.ResetClub()
		return nil
	}
	return fmt.Errorf("unknown LikeClub edge %s", name)
}
