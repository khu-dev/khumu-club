// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khu-dev/khumu-club/ent/category"
	"github.com/khu-dev/khumu-club/ent/club"
	"github.com/khu-dev/khumu-club/ent/likeclub"
	"github.com/khu-dev/khumu-club/ent/predicate"
)

// ClubUpdate is the builder for updating Club entities.
type ClubUpdate struct {
	config
	hooks    []Hook
	mutation *ClubMutation
}

// Where adds a new predicate for the ClubUpdate builder.
func (cu *ClubUpdate) Where(ps ...predicate.Club) *ClubUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ClubUpdate) SetName(s string) *ClubUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetSummary sets the "summary" field.
func (cu *ClubUpdate) SetSummary(s string) *ClubUpdate {
	cu.mutation.SetSummary(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *ClubUpdate) SetDescription(s string) *ClubUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetImages sets the "images" field.
func (cu *ClubUpdate) SetImages(s []string) *ClubUpdate {
	cu.mutation.SetImages(s)
	return cu
}

// ClearImages clears the value of the "images" field.
func (cu *ClubUpdate) ClearImages() *ClubUpdate {
	cu.mutation.ClearImages()
	return cu
}

// SetHomepage sets the "homepage" field.
func (cu *ClubUpdate) SetHomepage(s string) *ClubUpdate {
	cu.mutation.SetHomepage(s)
	return cu
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableHomepage(s *string) *ClubUpdate {
	if s != nil {
		cu.SetHomepage(*s)
	}
	return cu
}

// ClearHomepage clears the value of the "homepage" field.
func (cu *ClubUpdate) ClearHomepage() *ClubUpdate {
	cu.mutation.ClearHomepage()
	return cu
}

// SetInstagram sets the "instagram" field.
func (cu *ClubUpdate) SetInstagram(s string) *ClubUpdate {
	cu.mutation.SetInstagram(s)
	return cu
}

// SetNillableInstagram sets the "instagram" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableInstagram(s *string) *ClubUpdate {
	if s != nil {
		cu.SetInstagram(*s)
	}
	return cu
}

// ClearInstagram clears the value of the "instagram" field.
func (cu *ClubUpdate) ClearInstagram() *ClubUpdate {
	cu.mutation.ClearInstagram()
	return cu
}

// SetFacebook sets the "facebook" field.
func (cu *ClubUpdate) SetFacebook(s string) *ClubUpdate {
	cu.mutation.SetFacebook(s)
	return cu
}

// SetNillableFacebook sets the "facebook" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableFacebook(s *string) *ClubUpdate {
	if s != nil {
		cu.SetFacebook(*s)
	}
	return cu
}

// ClearFacebook clears the value of the "facebook" field.
func (cu *ClubUpdate) ClearFacebook() *ClubUpdate {
	cu.mutation.ClearFacebook()
	return cu
}

// SetPhone sets the "phone" field.
func (cu *ClubUpdate) SetPhone(s string) *ClubUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cu *ClubUpdate) SetNillablePhone(s *string) *ClubUpdate {
	if s != nil {
		cu.SetPhone(*s)
	}
	return cu
}

// ClearPhone clears the value of the "phone" field.
func (cu *ClubUpdate) ClearPhone() *ClubUpdate {
	cu.mutation.ClearPhone()
	return cu
}

// SetEmail sets the "email" field.
func (cu *ClubUpdate) SetEmail(s string) *ClubUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableEmail(s *string) *ClubUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *ClubUpdate) ClearEmail() *ClubUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetRecommended sets the "recommended" field.
func (cu *ClubUpdate) SetRecommended(b bool) *ClubUpdate {
	cu.mutation.SetRecommended(b)
	return cu
}

// SetNillableRecommended sets the "recommended" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableRecommended(b *bool) *ClubUpdate {
	if b != nil {
		cu.SetRecommended(*b)
	}
	return cu
}

// AddLikeIDs adds the "likes" edge to the LikeClub entity by IDs.
func (cu *ClubUpdate) AddLikeIDs(ids ...int) *ClubUpdate {
	cu.mutation.AddLikeIDs(ids...)
	return cu
}

// AddLikes adds the "likes" edges to the LikeClub entity.
func (cu *ClubUpdate) AddLikes(l ...*LikeClub) *ClubUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLikeIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (cu *ClubUpdate) AddCategoryIDs(ids ...string) *ClubUpdate {
	cu.mutation.AddCategoryIDs(ids...)
	return cu
}

// AddCategories adds the "categories" edges to the Category entity.
func (cu *ClubUpdate) AddCategories(c ...*Category) *ClubUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCategoryIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cu *ClubUpdate) Mutation() *ClubMutation {
	return cu.mutation
}

// ClearLikes clears all "likes" edges to the LikeClub entity.
func (cu *ClubUpdate) ClearLikes() *ClubUpdate {
	cu.mutation.ClearLikes()
	return cu
}

// RemoveLikeIDs removes the "likes" edge to LikeClub entities by IDs.
func (cu *ClubUpdate) RemoveLikeIDs(ids ...int) *ClubUpdate {
	cu.mutation.RemoveLikeIDs(ids...)
	return cu
}

// RemoveLikes removes "likes" edges to LikeClub entities.
func (cu *ClubUpdate) RemoveLikes(l ...*LikeClub) *ClubUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLikeIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (cu *ClubUpdate) ClearCategories() *ClubUpdate {
	cu.mutation.ClearCategories()
	return cu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (cu *ClubUpdate) RemoveCategoryIDs(ids ...string) *ClubUpdate {
	cu.mutation.RemoveCategoryIDs(ids...)
	return cu
}

// RemoveCategories removes "categories" edges to Category entities.
func (cu *ClubUpdate) RemoveCategories(c ...*Category) *ClubUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClubUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClubUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClubUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClubUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClubUpdate) check() error {
	if v, ok := cu.mutation.Description(); ok {
		if err := club.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (cu *ClubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldName,
		})
	}
	if value, ok := cu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldSummary,
		})
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldDescription,
		})
	}
	if value, ok := cu.mutation.Images(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: club.FieldImages,
		})
	}
	if cu.mutation.ImagesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: club.FieldImages,
		})
	}
	if value, ok := cu.mutation.Homepage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldHomepage,
		})
	}
	if cu.mutation.HomepageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldHomepage,
		})
	}
	if value, ok := cu.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldInstagram,
		})
	}
	if cu.mutation.InstagramCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldInstagram,
		})
	}
	if value, ok := cu.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldFacebook,
		})
	}
	if cu.mutation.FacebookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldFacebook,
		})
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldPhone,
		})
	}
	if cu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldPhone,
		})
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldEmail,
		})
	}
	if cu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldEmail,
		})
	}
	if value, ok := cu.mutation.Recommended(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: club.FieldRecommended,
		})
	}
	if cu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.LikesTable,
			Columns: []string{club.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: likeclub.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLikesIDs(); len(nodes) > 0 && !cu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.LikesTable,
			Columns: []string{club.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: likeclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.LikesTable,
			Columns: []string{club.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: likeclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.CategoriesTable,
			Columns: club.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !cu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.CategoriesTable,
			Columns: club.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.CategoriesTable,
			Columns: club.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClubUpdateOne is the builder for updating a single Club entity.
type ClubUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClubMutation
}

// SetName sets the "name" field.
func (cuo *ClubUpdateOne) SetName(s string) *ClubUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetSummary sets the "summary" field.
func (cuo *ClubUpdateOne) SetSummary(s string) *ClubUpdateOne {
	cuo.mutation.SetSummary(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ClubUpdateOne) SetDescription(s string) *ClubUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetImages sets the "images" field.
func (cuo *ClubUpdateOne) SetImages(s []string) *ClubUpdateOne {
	cuo.mutation.SetImages(s)
	return cuo
}

// ClearImages clears the value of the "images" field.
func (cuo *ClubUpdateOne) ClearImages() *ClubUpdateOne {
	cuo.mutation.ClearImages()
	return cuo
}

// SetHomepage sets the "homepage" field.
func (cuo *ClubUpdateOne) SetHomepage(s string) *ClubUpdateOne {
	cuo.mutation.SetHomepage(s)
	return cuo
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableHomepage(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetHomepage(*s)
	}
	return cuo
}

// ClearHomepage clears the value of the "homepage" field.
func (cuo *ClubUpdateOne) ClearHomepage() *ClubUpdateOne {
	cuo.mutation.ClearHomepage()
	return cuo
}

// SetInstagram sets the "instagram" field.
func (cuo *ClubUpdateOne) SetInstagram(s string) *ClubUpdateOne {
	cuo.mutation.SetInstagram(s)
	return cuo
}

// SetNillableInstagram sets the "instagram" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableInstagram(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetInstagram(*s)
	}
	return cuo
}

// ClearInstagram clears the value of the "instagram" field.
func (cuo *ClubUpdateOne) ClearInstagram() *ClubUpdateOne {
	cuo.mutation.ClearInstagram()
	return cuo
}

// SetFacebook sets the "facebook" field.
func (cuo *ClubUpdateOne) SetFacebook(s string) *ClubUpdateOne {
	cuo.mutation.SetFacebook(s)
	return cuo
}

// SetNillableFacebook sets the "facebook" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableFacebook(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetFacebook(*s)
	}
	return cuo
}

// ClearFacebook clears the value of the "facebook" field.
func (cuo *ClubUpdateOne) ClearFacebook() *ClubUpdateOne {
	cuo.mutation.ClearFacebook()
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *ClubUpdateOne) SetPhone(s string) *ClubUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillablePhone(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetPhone(*s)
	}
	return cuo
}

// ClearPhone clears the value of the "phone" field.
func (cuo *ClubUpdateOne) ClearPhone() *ClubUpdateOne {
	cuo.mutation.ClearPhone()
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ClubUpdateOne) SetEmail(s string) *ClubUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableEmail(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *ClubUpdateOne) ClearEmail() *ClubUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetRecommended sets the "recommended" field.
func (cuo *ClubUpdateOne) SetRecommended(b bool) *ClubUpdateOne {
	cuo.mutation.SetRecommended(b)
	return cuo
}

// SetNillableRecommended sets the "recommended" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableRecommended(b *bool) *ClubUpdateOne {
	if b != nil {
		cuo.SetRecommended(*b)
	}
	return cuo
}

// AddLikeIDs adds the "likes" edge to the LikeClub entity by IDs.
func (cuo *ClubUpdateOne) AddLikeIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.AddLikeIDs(ids...)
	return cuo
}

// AddLikes adds the "likes" edges to the LikeClub entity.
func (cuo *ClubUpdateOne) AddLikes(l ...*LikeClub) *ClubUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLikeIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (cuo *ClubUpdateOne) AddCategoryIDs(ids ...string) *ClubUpdateOne {
	cuo.mutation.AddCategoryIDs(ids...)
	return cuo
}

// AddCategories adds the "categories" edges to the Category entity.
func (cuo *ClubUpdateOne) AddCategories(c ...*Category) *ClubUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCategoryIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cuo *ClubUpdateOne) Mutation() *ClubMutation {
	return cuo.mutation
}

// ClearLikes clears all "likes" edges to the LikeClub entity.
func (cuo *ClubUpdateOne) ClearLikes() *ClubUpdateOne {
	cuo.mutation.ClearLikes()
	return cuo
}

// RemoveLikeIDs removes the "likes" edge to LikeClub entities by IDs.
func (cuo *ClubUpdateOne) RemoveLikeIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.RemoveLikeIDs(ids...)
	return cuo
}

// RemoveLikes removes "likes" edges to LikeClub entities.
func (cuo *ClubUpdateOne) RemoveLikes(l ...*LikeClub) *ClubUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLikeIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (cuo *ClubUpdateOne) ClearCategories() *ClubUpdateOne {
	cuo.mutation.ClearCategories()
	return cuo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (cuo *ClubUpdateOne) RemoveCategoryIDs(ids ...string) *ClubUpdateOne {
	cuo.mutation.RemoveCategoryIDs(ids...)
	return cuo
}

// RemoveCategories removes "categories" edges to Category entities.
func (cuo *ClubUpdateOne) RemoveCategories(c ...*Category) *ClubUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCategoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClubUpdateOne) Select(field string, fields ...string) *ClubUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Club entity.
func (cuo *ClubUpdateOne) Save(ctx context.Context) (*Club, error) {
	var (
		err  error
		node *Club
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClubUpdateOne) SaveX(ctx context.Context) *Club {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClubUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClubUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClubUpdateOne) check() error {
	if v, ok := cuo.mutation.Description(); ok {
		if err := club.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (cuo *ClubUpdateOne) sqlSave(ctx context.Context) (_node *Club, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Club.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, club.FieldID)
		for _, f := range fields {
			if !club.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != club.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldName,
		})
	}
	if value, ok := cuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldSummary,
		})
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.Images(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: club.FieldImages,
		})
	}
	if cuo.mutation.ImagesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: club.FieldImages,
		})
	}
	if value, ok := cuo.mutation.Homepage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldHomepage,
		})
	}
	if cuo.mutation.HomepageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldHomepage,
		})
	}
	if value, ok := cuo.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldInstagram,
		})
	}
	if cuo.mutation.InstagramCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldInstagram,
		})
	}
	if value, ok := cuo.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldFacebook,
		})
	}
	if cuo.mutation.FacebookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldFacebook,
		})
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldPhone,
		})
	}
	if cuo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldPhone,
		})
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldEmail,
		})
	}
	if cuo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: club.FieldEmail,
		})
	}
	if value, ok := cuo.mutation.Recommended(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: club.FieldRecommended,
		})
	}
	if cuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.LikesTable,
			Columns: []string{club.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: likeclub.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !cuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.LikesTable,
			Columns: []string{club.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: likeclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.LikesTable,
			Columns: []string{club.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: likeclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.CategoriesTable,
			Columns: club.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !cuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.CategoriesTable,
			Columns: club.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.CategoriesTable,
			Columns: club.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Club{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
